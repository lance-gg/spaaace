{"version":3,"sources":["../../src/server/NameGenerator.js"],"names":["name_set","chain_cache","general","require","generate_name","type","chain","markov_chain","markov_name","name_list","n_of","list","i","push","construct_chain","length","names","split","incr_chain","j","name","c","substr","string","last_c","scale_chain","key","token","table_len","count","weighted","Math","floor","pow","parts","select_link","name_len","join","len","idx","random","t","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// name_generator.js\n// written and released to the public domain by drow <drow@bin.sh>\n// http://creativecommons.org/publicdomain/zero/1.0/\n\nvar name_set = {};\nvar chain_cache = {};\n\nname_set.general = require(\"./NameSet\");\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// generator function\n\nfunction generate_name (type) {\n    var chain; if (chain = markov_chain(type)) {\n        return markov_name(chain);\n    }\n    return '';\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// generate multiple\n\nfunction name_list (type, n_of) {\n    var list = [];\n\n    var i; for (i = 0; i < n_of; i++) {\n        list.push(generate_name(type));\n    }\n    return list;\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// get markov chain by type\n\nfunction markov_chain (type) {\n    var chain; if (chain = chain_cache[type]) {\n        return chain;\n    } else {\n        var list; if (list = name_set[type]) {\n            var chain; if (chain = construct_chain(list)) {\n                chain_cache[type] = chain;\n                return chain;\n            }\n        }\n    }\n    return false;\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// construct markov chain from list of names\n\nfunction construct_chain (list) {\n    var chain = {};\n\n    var i; for (i = 0; i < list.length; i++) {\n        var names = list[i].split(/\\s+/);\n        chain = incr_chain(chain,'parts',names.length);\n\n        var j; for (j = 0; j < names.length; j++) {\n            var name = names[j];\n            chain = incr_chain(chain,'name_len',name.length);\n\n            var c = name.substr(0,1);\n            chain = incr_chain(chain,'initial',c);\n\n            var string = name.substr(1);\n            var last_c = c;\n\n            while (string.length > 0) {\n                var c = string.substr(0,1);\n                chain = incr_chain(chain,last_c,c);\n\n                string = string.substr(1);\n                last_c = c;\n            }\n        }\n    }\n    return scale_chain(chain);\n}\nfunction incr_chain (chain, key, token) {\n    if (chain[key]) {\n        if (chain[key][token]) {\n            chain[key][token]++;\n        } else {\n            chain[key][token] = 1;\n        }\n    } else {\n        chain[key] = {};\n        chain[key][token] = 1;\n    }\n    return chain;\n}\nfunction scale_chain (chain) {\n    var table_len = {};\n\n    var key; for (key in chain) {\n        table_len[key] = 0;\n\n        var token; for (let token in chain[key]) {\n            var count = chain[key][token];\n            var weighted = Math.floor(Math.pow(count,1.3));\n\n            chain[key][token] = weighted;\n            table_len[key] += weighted;\n        }\n    }\n    chain['table_len'] = table_len;\n    return chain;\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// construct name from markov chain\n\nfunction markov_name (chain) {\n    var parts = select_link(chain,'parts');\n    var names = [];\n\n    var i; for (i = 0; i < parts; i++) {\n        var name_len = select_link(chain,'name_len');\n        var c = select_link(chain,'initial');\n        var name = c;\n        var last_c = c;\n\n        while (name.length < name_len) {\n            c = select_link(chain,last_c);\n            name += c;\n            last_c = c;\n        }\n        names.push(name);\n    }\n    return names.join(' ');\n}\nfunction select_link (chain, key) {\n    var len = chain['table_len'][key];\n    var idx = Math.floor(Math.random() * len);\n\n    var t = 0; for (let token in chain[key]) {\n        t += chain[key][token];\n        if (idx < t) { return token; }\n    }\n    return '-';\n}\n\n\nmodule.exports = generate_name;"],"file":"NameGenerator.js"}