{"version":3,"sources":["../../src/server/RoomManager.js"],"names":["getRoomAndUsername","URL","res","parts","url","parse","query","checkWhetherVisitorInWorld","username","roomName","roomBasedOn","assetId","interactivePublicKey","interactiveNonce","urlSlug","visitorId","WorldActivity","create","credentials","worldActivity","currentVisitors","visitor","privateZoneId","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEO,IAAMA,kBAAkB;AAAA,qEAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAChC;AACMC,YAAAA,KAF0B,GAElBC,gBAAIC,KAAJ,CAAUJ,GAAV,EAAe,IAAf,CAFkB;AAG1BK,YAAAA,KAH0B,GAGlBH,KAAK,CAACG,KAHY;AAAA;AAAA,mBAITC,0BAA0B,CAACD,KAAD,EAAQJ,GAAR,CAJjB;;AAAA;AAI1BM,YAAAA,QAJ0B;AAAA,6CAKzB;AAAEC,cAAAA,QAAQ,EAAEH,KAAK,CAACI,WAAW,EAAZ,CAAjB;AAAkCF,cAAAA,QAAQ,EAARA;AAAlC,aALyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBR,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;;;AAQA,IAAMU,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B;AACA,SAAO,SAAP;AACD,CAHM;;;;AAKP,IAAMH,0BAA0B;AAAA,sEAAG,kBAAOD,KAAP,EAAcJ,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACjC;AACQS,YAAAA,OAFyB,GAE+CL,KAF/C,CAEzBK,OAFyB,EAEhBC,oBAFgB,GAE+CN,KAF/C,CAEhBM,oBAFgB,EAEMC,gBAFN,GAE+CP,KAF/C,CAEMO,gBAFN,EAEwBC,OAFxB,GAE+CR,KAF/C,CAEwBQ,OAFxB,EAEiCC,SAFjC,GAE+CT,KAF/C,CAEiCS,SAFjC,EAGjC;AACA;AACA;AACA;AAEA;;AARiC;AAAA;AAAA,mBAUHC,qBAAcC,MAAd,CAAqBH,OAArB,EAA8B;AACxDI,cAAAA,WAAW,EAAE;AACXP,gBAAAA,OAAO,EAAPA,OADW;AAEXE,gBAAAA,gBAAgB,EAAhBA,gBAFW;AAGXD,gBAAAA,oBAAoB,EAApBA,oBAHW;AAIXG,gBAAAA,SAAS,EAATA;AAJW;AAD2C,aAA9B,CAVG;;AAAA;AAUzBI,YAAAA,aAVyB;AAAA;AAAA,mBAkBDA,aAAa,CAACC,eAAd,EAlBC;;AAAA;AAkBzBA,YAAAA,eAlByB;AAoB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEMC,YAAAA,OAhCyB,GAgCfD,eAAe,CAACL,SAAD,CAhCA;;AAAA,kBAiC3B,CAACM,OAAD,IAAY,CAACA,OAAO,CAACb,QAjCM;AAAA;AAAA;AAAA;;AAAA,kBAiCU,cAjCV;;AAAA;AAmCvBc,YAAAA,aAnCuB,GAmCKD,OAnCL,CAmCvBC,aAnCuB,EAmCRd,QAnCQ,GAmCKa,OAnCL,CAmCRb,QAnCQ;;AAAA,kBAqC3B,CAACc,aAAD,IAAkBA,aAAa,KAAKX,OArCT;AAAA;AAAA;AAAA;;AAAA,8CAuCtB,IAvCsB;;AAAA;AAAA,8CAyCtBH,QAzCsB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4C/B;AACAe,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,gBA7C+B,CA8C/B;;AA9C+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA1BjB,0BAA0B;AAAA;AAAA;AAAA,GAAhC","sourcesContent":["import url from \"url\";\nimport http from \"http\";\nimport { getAssetAndDataObject, Visitor, WorldActivity } from \"../MetaverseCloudIntegrations/rtsdk\";\nimport \"regenerator-runtime/runtime\";\n\nexport const getRoomAndUsername = async (URL, res) => {\n  // console.log(URL);\n  const parts = url.parse(URL, true);\n  const query = parts.query;\n  const username = await checkWhetherVisitorInWorld(query, res);\n  return { roomName: query[roomBasedOn()], username };\n};\n\nexport const roomBasedOn = () => {\n  // Can be changed to dynamically alter the query being used as basis of room name.\n  return \"assetId\";\n};\n\nconst checkWhetherVisitorInWorld = async (query, res) => {\n  // Check whether have access to interactive nonce, which means visitor is in world.\n  const { assetId, interactivePublicKey, interactiveNonce, urlSlug, visitorId } = query;\n  // console.log(\"ðŸš€ ~ file: RoomManager.js:20 ~ checkWhetherVisitorInWorld ~ query:\", query);\n  // const req = {};\n  // req.body = { assetId, interactivePublicKey, interactiveNonce, urlSlug, visitorId };\n  // get Visitor Info to verify that visitor is actually in world.  Also get their username to populate into ship.\n\n  // if (assetId) {\n  try {\n    const worldActivity = await WorldActivity.create(urlSlug, {\n      credentials: {\n        assetId,\n        interactiveNonce,\n        interactivePublicKey,\n        visitorId,\n      },\n    });\n    const currentVisitors = await worldActivity.currentVisitors();\n\n    // const visitor = await Visitor.get(visitorId, urlSlug, {\n    //   credentials: {\n    //     assetId,\n    //     interactiveNonce,\n    //     interactivePublicKey,\n    //     visitorId,\n    //   },\n    // });\n    // console.log(\"ðŸš€ ~ file: RoomManager.js:27 ~ checkWhetherVisitorInWorld ~ visitor:\", visitor);\n    // const privateZoneId = visitor.privateZoneId;\n    // const username = visitor.username;\n\n    const visitor = currentVisitors[visitorId];\n    if (!visitor || !visitor.username) throw \"Not in world\";\n\n    const { privateZoneId, username } = visitor;\n\n    if (!privateZoneId || privateZoneId !== assetId) {\n      // Not in the private Zone.  Can watch ships fly around, but can't play.\n      return null;\n    } else {\n      return username;\n    }\n  } catch (e) {\n    // Not actually in the world.  Should prevent from seeing game.\n    console.log(\"ERROR\", e);\n    // if (res) res.redirect(\"https://topia.io\");\n  }\n};\n"],"file":"RoomManager.js"}