{"version":3,"sources":["../../src/server/RoomManager.js"],"names":["getRoomAndUsername","URL","parts","url","parse","query","checkWhetherVisitorInWorld","username","roomName","roomBasedOn","assetId","interactivePublicKey","interactiveNonce","urlSlug","visitorId","console","log","req","body","Visitor","get","credentials","visitor","result"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,IAAMA,kBAAkB;AAAA,qEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,YAAAA,KAD0B,GAClBC,gBAAIC,KAAJ,CAAUH,GAAV,EAAe,IAAf,CADkB;AAE1BI,YAAAA,KAF0B,GAElBH,KAAK,CAACG,KAFY;AAAA;AAAA,mBAGTC,0BAA0B,CAACD,KAAD,CAHjB;;AAAA;AAG1BE,YAAAA,QAH0B;AAAA,6CAIzB;AAAEC,cAAAA,QAAQ,EAAEH,KAAK,CAACI,WAAW,EAAZ,CAAjB;AAAkCF,cAAAA,QAAQ,EAARA;AAAlC,aAJyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBP,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;;;AAOA,IAAMS,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B;AACA,SAAO,SAAP;AACD,CAHM;;;;AAKP,IAAMH,0BAA0B;AAAA,sEAAG,kBAAOD,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjC;AACQK,YAAAA,OAFyB,GAE+CL,KAF/C,CAEzBK,OAFyB,EAEhBC,oBAFgB,GAE+CN,KAF/C,CAEhBM,oBAFgB,EAEMC,gBAFN,GAE+CP,KAF/C,CAEMO,gBAFN,EAEwBC,OAFxB,GAE+CR,KAF/C,CAEwBQ,OAFxB,EAEiCC,SAFjC,GAE+CT,KAF/C,CAEiCS,SAFjC;AAGjCC,YAAAA,OAAO,CAACC,GAAR,CAAY,oEAAZ,EAAkFX,KAAlF;AACMY,YAAAA,GAJ2B,GAIrB,EAJqB;AAKjCA,YAAAA,GAAG,CAACC,IAAJ,GAAW;AAAER,cAAAA,OAAO,EAAPA,OAAF;AAAWC,cAAAA,oBAAoB,EAApBA,oBAAX;AAAiCC,cAAAA,gBAAgB,EAAhBA,gBAAjC;AAAmDC,cAAAA,OAAO,EAAPA,OAAnD;AAA4DC,cAAAA,SAAS,EAATA;AAA5D,aAAX,CALiC,CAMjC;;AANiC,iBAQ9BJ,OAR8B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASTS,eAAQC,GAAR,CAAYN,SAAZ,EAAuBD,OAAvB,EAAgC;AAAEQ,cAAAA,WAAW,EAAE;AACnEX,gBAAAA,OAAO,EAAPA,OADmE;AAEnEE,gBAAAA,gBAAgB,EAAhBA,gBAFmE;AAGnED,gBAAAA,oBAAoB,EAApBA,oBAHmE;AAInEG,gBAAAA,SAAS,EAATA;AAJmE;AAAf,aAAhC,CATS;;AAAA;AASzBQ,YAAAA,OATyB;AAe/BP,YAAAA,OAAO,CAACC,GAAR,CAAY,sEAAZ,EAAoFM,OAApF;AAf+B;AAAA,mBAiBV,kCAAsBL,GAAtB,CAjBU;;AAAA;AAiBzBM,YAAAA,MAjByB;AAkB/BR,YAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ,EAAmFO,MAAnF;;AAlB+B;AAAA,8CAyB1B,QAzB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA1BjB,0BAA0B;AAAA;AAAA;AAAA,GAAhC","sourcesContent":["import url from \"url\";\nimport { getAssetAndDataObject, Visitor } from \"../MetaverseCloudIntegrations/rtsdk\";\nimport 'regenerator-runtime/runtime'\n\nexport const getRoomAndUsername = async (URL) => {\n  const parts = url.parse(URL, true);\n  const query = parts.query;\n  const username = await checkWhetherVisitorInWorld(query);\n  return { roomName: query[roomBasedOn()], username };\n};\n\nexport const roomBasedOn = () => {\n  // Can be changed to dynamically alter the query being used as basis of room name.\n  return \"assetId\";\n};\n\nconst checkWhetherVisitorInWorld = async (query) => {\n  // Check whether have access to interactive nonce, which means visitor is in world.\n  const { assetId, interactivePublicKey, interactiveNonce, urlSlug, visitorId } = query;\n  console.log(\"ðŸš€ ~ file: RoomManager.js:20 ~ checkWhetherVisitorInWorld ~ query:\", query)\n  const req = {};\n  req.body = { assetId, interactivePublicKey, interactiveNonce, urlSlug, visitorId };\n  // get Visitor Info to verify that visitor is actually in world.  Also get their username to populate into ship.\n\n  if(assetId) {\n    const visitor = await Visitor.get(visitorId, urlSlug, { credentials: {\n      assetId,\n      interactiveNonce,\n      interactivePublicKey,\n      visitorId,\n    }})\n    console.log(\"ðŸš€ ~ file: RoomManager.js:27 ~ checkWhetherVisitorInWorld ~ visitor:\", visitor)\n\n    const result = await getAssetAndDataObject(req);\n    console.log(\"ðŸš€ ~ file: RoomManager.js:25 ~ checkWhetherVisitorInWorld ~ result:\", result)\n  }\n  // if (!result || !result.inPrivateZone || result.inPrivateZone === assetId) {\n  // Route to page that says \"You don't have access to this experience.  Please enter the gaming zone and try again.\"\n  // } else {\n  // const { displayName } = result;\n\n  return \"User 1\";\n  // }\n};\n"],"file":"RoomManager.js"}