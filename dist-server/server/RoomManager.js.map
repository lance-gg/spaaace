{"version":3,"sources":["../../src/server/RoomManager.js"],"names":["getRoomAndUsername","URL","parts","url","parse","query","console","log","checkWhetherVisitorInWorld","username","roomName","roomBasedOn","assetId","interactivePublicKey","interactiveNonce","urlSlug","visitorId","req","body","e"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,IAAMA,kBAAkB;AAAA,qEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,YAAAA,KAD0B,GAClBC,gBAAIC,KAAJ,CAAUH,GAAV,EAAe,IAAf,CADkB;AAE1BI,YAAAA,KAF0B,GAElBH,KAAK,CAACG,KAFY;AAGhCC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AAHgC;AAAA,mBAITG,0BAA0B,CAACH,KAAD,CAJjB;;AAAA;AAI1BI,YAAAA,QAJ0B;AAAA,6CAKzB;AAAEC,cAAAA,QAAQ,EAAEL,KAAK,CAACM,WAAW,EAAZ,CAAjB;AAAkCF,cAAAA,QAAQ,EAARA;AAAlC,aALyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBT,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;;;AAQA,IAAMW,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B;AACA,SAAO,SAAP;AACD,CAHM;;;;AAKP,IAAMH,0BAA0B;AAAA,sEAAG,kBAAOH,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjC;AACQO,YAAAA,OAFyB,GAE+CP,KAF/C,CAEzBO,OAFyB,EAEhBC,oBAFgB,GAE+CR,KAF/C,CAEhBQ,oBAFgB,EAEMC,gBAFN,GAE+CT,KAF/C,CAEMS,gBAFN,EAEwBC,OAFxB,GAE+CV,KAF/C,CAEwBU,OAFxB,EAEiCC,SAFjC,GAE+CX,KAF/C,CAEiCW,SAFjC;AAGjCV,YAAAA,OAAO,CAACC,GAAR,CAAY,oEAAZ,EAAkFF,KAAlF;AACMY,YAAAA,GAJ2B,GAIrB,EAJqB;AAKjCA,YAAAA,GAAG,CAACC,IAAJ,GAAW;AAAEN,cAAAA,OAAO,EAAPA,OAAF;AAAWC,cAAAA,oBAAoB,EAApBA,oBAAX;AAAiCC,cAAAA,gBAAgB,EAAhBA,gBAAjC;AAAmDC,cAAAA,OAAO,EAAPA,OAAnD;AAA4DC,cAAAA,SAAS,EAATA;AAA5D,aAAX,CALiC,CAMjC;;AAEA,gBAAIJ,OAAJ,EAAa;AACX,kBAAI,CACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,eAZD,CAYE,OAAOO,CAAP,EAAU;AACVb,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBY,CAArB,EADU,CAEV;AACD;AACF,aAzBgC,CA0BjC;AACA;AACA;AACA;;;AA7BiC,8CA+B1B,QA/B0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA1BX,0BAA0B;AAAA;AAAA;AAAA,GAAhC","sourcesContent":["import url from \"url\";\nimport { getAssetAndDataObject, Visitor } from \"../MetaverseCloudIntegrations/rtsdk\";\nimport \"regenerator-runtime/runtime\";\n\nexport const getRoomAndUsername = async (URL) => {\n  const parts = url.parse(URL, true);\n  const query = parts.query;\n  console.log(\"Query\", query);\n  const username = await checkWhetherVisitorInWorld(query);\n  return { roomName: query[roomBasedOn()], username };\n};\n\nexport const roomBasedOn = () => {\n  // Can be changed to dynamically alter the query being used as basis of room name.\n  return \"assetId\";\n};\n\nconst checkWhetherVisitorInWorld = async (query) => {\n  // Check whether have access to interactive nonce, which means visitor is in world.\n  const { assetId, interactivePublicKey, interactiveNonce, urlSlug, visitorId } = query;\n  console.log(\"ðŸš€ ~ file: RoomManager.js:20 ~ checkWhetherVisitorInWorld ~ query:\", query);\n  const req = {};\n  req.body = { assetId, interactivePublicKey, interactiveNonce, urlSlug, visitorId };\n  // get Visitor Info to verify that visitor is actually in world.  Also get their username to populate into ship.\n\n  if (assetId) {\n    try {\n      // const visitor = await Visitor.get(visitorId, urlSlug, {\n      //   credentials: {\n      //     assetId,\n      //     interactiveNonce,\n      //     interactivePublicKey,\n      //     visitorId,\n      //   },\n      // });\n      // console.log(\"ðŸš€ ~ file: RoomManager.js:27 ~ checkWhetherVisitorInWorld ~ visitor:\", visitor);\n      // const result = await getAssetAndDataObject(req);\n      // console.log(\"ðŸš€ ~ file: RoomManager.js:25 ~ checkWhetherVisitorInWorld ~ result:\", result);\n    } catch (e) {\n      console.log(\"ERROR\", e);\n      // console.log(e.data);\n    }\n  }\n  // if (!result || !result.inPrivateZone || result.inPrivateZone === assetId) {\n  // Route to page that says \"You don't have access to this experience.  Please enter the gaming zone and try again.\"\n  // } else {\n  // const { displayName } = result;\n\n  return \"User 1\";\n  // }\n};\n"],"file":"RoomManager.js"}