{"version":3,"sources":["../../src/common/SpaaaceGameEngine.js"],"names":["SpaaaceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","type","collisionDistance","serializer","registerClass","Ship","Missile","worldWrap","width","height","on","e","collisionObjects","Object","keys","map","k","ship","find","o","missile","playerId","destroyMissile","id","trace","info","emit","reduceVisibleThrust","bind","inputData","isServer","playerShip","world","queryObject","instanceType","input","accelerate","showThrust","turnRight","turnLeft","makeMissile","messageIndex","newShipX","Math","floor","random","worldSettings","newShipY","position","TwoVector","addObjectToWorld","console","log","toString","inputId","copy","velocity","angle","ownerId","x","cos","PI","y","sin","obj","timer","add","missileId","objects","removeObjectFromWorld","postStepEv","isReenact","ships","queryObjects","forEach","Number","isInteger","GameEngine"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,iB;;;;;AACnB,6BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAN;AACA,UAAKC,aAAL,GAAqB,IAAIC,4BAAJ,CAAwB;AAC3CC,MAAAA,UAAU,+BADiC;AAE3CC,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE,OADI;AAEVC,QAAAA,iBAAiB,EAAE;AAFT;AAF+B,KAAxB,CAArB;AAFmB;AASpB;;;;oCAEeC,U,EAAY;AAC1BA,MAAAA,UAAU,CAACC,aAAX,CAAyBC,gBAAzB;AACAF,MAAAA,UAAU,CAACC,aAAX,CAAyBE,mBAAzB;AACD;;;gCAEW;AACV,uFAAgB;AACdC,QAAAA,SAAS,EAAE,IADG;AAEdC,QAAAA,KAAK,EAAE,IAFO;AAGdC,QAAAA,MAAM,EAAE;AAHM,OAAhB;AAKD;;;4BAEO;AAAA;;AACN;;AAEA,WAAKC,EAAL,CAAQ,gBAAR,EAA0B,UAACC,CAAD,EAAO;AAC/B,YAAIC,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYH,CAAZ,EAAeI,GAAf,CAAmB,UAACC,CAAD;AAAA,iBAAOL,CAAC,CAACK,CAAD,CAAR;AAAA,SAAnB,CAAvB;AACA,YAAIC,IAAI,GAAGL,gBAAgB,CAACM,IAAjB,CAAsB,UAACC,CAAD;AAAA,iBAAOA,CAAC,YAAYd,gBAApB;AAAA,SAAtB,CAAX;AACA,YAAIe,OAAO,GAAGR,gBAAgB,CAACM,IAAjB,CAAsB,UAACC,CAAD;AAAA,iBAAOA,CAAC,YAAYb,mBAApB;AAAA,SAAtB,CAAd;AAEA,YAAI,CAACW,IAAD,IAAS,CAACG,OAAd,EAAuB,OALQ,CAO/B;;AACA,YAAIA,OAAO,CAACC,QAAR,KAAqBJ,IAAI,CAACI,QAA9B,EAAwC;AACtC,UAAA,MAAI,CAACC,cAAL,CAAoBF,OAAO,CAACG,EAA5B;;AACA,UAAA,MAAI,CAACC,KAAL,CAAWC,IAAX,CAAgB;AAAA,6CAAyBL,OAAO,CAACC,QAAjC,uBAAsDJ,IAAI,CAACM,EAA3D;AAAA,WAAhB;;AACA,UAAA,MAAI,CAACG,IAAL,CAAU,YAAV,EAAwB;AAAEN,YAAAA,OAAO,EAAPA,OAAF;AAAWH,YAAAA,IAAI,EAAJA;AAAX,WAAxB;AACD;AACF,OAbD;AAeA,WAAKP,EAAL,CAAQ,UAAR,EAAoB,KAAKiB,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAApB;AACD;;;iCAEYC,S,EAAWR,Q,EAAUS,Q,EAAU;AAC1C,0FAAmBD,SAAnB,EAA8BR,QAA9B,EAD0C,CAG1C;;;AACA,UAAIU,UAAU,GAAG,KAAKC,KAAL,CAAWC,WAAX,CAAuB;AACtCZ,QAAAA,QAAQ,EAAEA,QAD4B;AAEtCa,QAAAA,YAAY,EAAE7B;AAFwB,OAAvB,CAAjB;;AAKA,UAAI0B,UAAJ,EAAgB;AACd,YAAIF,SAAS,CAACM,KAAV,IAAmB,IAAvB,EAA6B;AAC3BJ,UAAAA,UAAU,CAACK,UAAX,CAAsB,IAAtB;AACAL,UAAAA,UAAU,CAACM,UAAX,GAAwB,CAAxB,CAF2B,CAEA;AAC5B,SAHD,MAGO,IAAIR,SAAS,CAACM,KAAV,IAAmB,OAAvB,EAAgC;AACrCJ,UAAAA,UAAU,CAACO,SAAX,CAAqB,GAArB;AACD,SAFM,MAEA,IAAIT,SAAS,CAACM,KAAV,IAAmB,MAAvB,EAA+B;AACpCJ,UAAAA,UAAU,CAACQ,QAAX,CAAoB,GAApB;AACD,SAFM,MAEA,IAAIV,SAAS,CAACM,KAAV,IAAmB,OAAvB,EAAgC;AACrC,eAAKK,WAAL,CAAiBT,UAAjB,EAA6BF,SAAS,CAACY,YAAvC;AACA,eAAKf,IAAL,CAAU,aAAV;AACD;AACF;AACF,K,CAED;;;;6BACSL,Q,EAAU;AACjB,UAAIqB,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAKC,aAAL,CAAmBtC,KAAnB,GAA2B,GAA5C,CAAX,IAA+D,GAA9E;AACA,UAAIuC,QAAQ,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAKC,aAAL,CAAmBrC,MAAnB,GAA4B,GAA7C,CAAX,IAAgE,GAA/E;AAEA,UAAIQ,IAAI,GAAG,IAAIZ,gBAAJ,CAAS,IAAT,EAAe,IAAf,EAAqB;AAC9B2C,QAAAA,QAAQ,EAAE,IAAIC,kBAAJ,CAAcP,QAAd,EAAwBK,QAAxB;AADoB,OAArB,CAAX;AAIA9B,MAAAA,IAAI,CAACI,QAAL,GAAgBA,QAAhB;AACA,WAAK6B,gBAAL,CAAsBjC,IAAtB;AACAkC,MAAAA,OAAO,CAACC,GAAR,uBAA2BnC,IAAI,CAACoC,QAAL,EAA3B;AAEA,aAAOpC,IAAP;AACD;;;gCAEWc,U,EAAYuB,O,EAAS;AAC/B,UAAIlC,OAAO,GAAG,IAAId,mBAAJ,CAAY,IAAZ,CAAd,CAD+B,CAG/B;;AACAc,MAAAA,OAAO,CAAC4B,QAAR,CAAiBO,IAAjB,CAAsBxB,UAAU,CAACiB,QAAjC;AACA5B,MAAAA,OAAO,CAACoC,QAAR,CAAiBD,IAAjB,CAAsBxB,UAAU,CAACyB,QAAjC;AACApC,MAAAA,OAAO,CAACqC,KAAR,GAAgB1B,UAAU,CAAC0B,KAA3B;AACArC,MAAAA,OAAO,CAACC,QAAR,GAAmBU,UAAU,CAACV,QAA9B;AACAD,MAAAA,OAAO,CAACsC,OAAR,GAAkB3B,UAAU,CAACR,EAA7B;AACAH,MAAAA,OAAO,CAACkC,OAAR,GAAkBA,OAAlB,CAT+B,CASJ;;AAC3BlC,MAAAA,OAAO,CAACoC,QAAR,CAAiBG,CAAjB,IAAsBhB,IAAI,CAACiB,GAAL,CAASxC,OAAO,CAACqC,KAAR,IAAiBd,IAAI,CAACkB,EAAL,GAAU,GAA3B,CAAT,IAA4C,EAAlE;AACAzC,MAAAA,OAAO,CAACoC,QAAR,CAAiBM,CAAjB,IAAsBnB,IAAI,CAACoB,GAAL,CAAS3C,OAAO,CAACqC,KAAR,IAAiBd,IAAI,CAACkB,EAAL,GAAU,GAA3B,CAAT,IAA4C,EAAlE;AAEA,WAAKrC,KAAL,CAAWA,KAAX,CAAiB;AAAA,iCAAiBJ,OAAO,CAACG,EAAzB,2BAA4CH,OAAO,CAACoC,QAApD;AAAA,OAAjB;AAEA,UAAIQ,GAAG,GAAG,KAAKd,gBAAL,CAAsB9B,OAAtB,CAAV,CAf+B,CAiB/B;;AACA,UAAI4C,GAAJ,EAAS,KAAKC,KAAL,CAAWC,GAAX,CAAe,EAAf,EAAmB,KAAK5C,cAAxB,EAAwC,IAAxC,EAA8C,CAAC0C,GAAG,CAACzC,EAAL,CAA9C;AAET,aAAOH,OAAP;AACD,K,CAED;;;;mCACe+C,S,EAAW;AACxB,UAAI,KAAKnC,KAAL,CAAWoC,OAAX,CAAmBD,SAAnB,CAAJ,EAAmC;AACjC,aAAK3C,KAAL,CAAWA,KAAX,CAAiB;AAAA,mCAAiB2C,SAAjB;AAAA,SAAjB;AACA,aAAKE,qBAAL,CAA2BF,SAA3B;AACD;AACF,K,CAED;;;;wCACoBG,U,EAAY;AAC9B,UAAIA,UAAU,CAACC,SAAf,EAA0B;AAE1B,UAAIC,KAAK,GAAG,KAAKxC,KAAL,CAAWyC,YAAX,CAAwB;AAClCvC,QAAAA,YAAY,EAAE7B;AADoB,OAAxB,CAAZ;AAIAmE,MAAAA,KAAK,CAACE,OAAN,CAAc,UAACzD,IAAD,EAAU;AACtB,YAAI0D,MAAM,CAACC,SAAP,CAAiB3D,IAAI,CAACoB,UAAtB,KAAqCpB,IAAI,CAACoB,UAAL,IAAmB,CAA5D,EAA+DpB,IAAI,CAACoB,UAAL;AAChE,OAFD;AAGD;;;;EAhI4CwC,mB","sourcesContent":["import { SimplePhysicsEngine, GameEngine, TwoVector } from \"lance-gg\";\nimport Ship from \"./Ship\";\nimport Missile from \"./Missile\";\n\nexport default class SpaaaceGameEngine extends GameEngine {\n  constructor(options) {\n    super(options);\n    this.physicsEngine = new SimplePhysicsEngine({\n      gameEngine: this,\n      collisions: {\n        type: \"brute\",\n        collisionDistance: 28,\n      },\n    });\n  }\n\n  registerClasses(serializer) {\n    serializer.registerClass(Ship);\n    serializer.registerClass(Missile);\n  }\n\n  initWorld() {\n    super.initWorld({\n      worldWrap: true,\n      width: 3000,\n      height: 3000,\n    });\n  }\n\n  start() {\n    super.start();\n\n    this.on(\"collisionStart\", (e) => {\n      let collisionObjects = Object.keys(e).map((k) => e[k]);\n      let ship = collisionObjects.find((o) => o instanceof Ship);\n      let missile = collisionObjects.find((o) => o instanceof Missile);\n\n      if (!ship || !missile) return;\n\n      // make sure not to process the collision between a missile and the ship that fired it\n      if (missile.playerId !== ship.playerId) {\n        this.destroyMissile(missile.id);\n        this.trace.info(() => `missile by ship=${missile.playerId} hit ship=${ship.id}`);\n        this.emit(\"missileHit\", { missile, ship });\n      }\n    });\n\n    this.on(\"postStep\", this.reduceVisibleThrust.bind(this));\n  }\n\n  processInput(inputData, playerId, isServer) {\n    super.processInput(inputData, playerId);\n\n    // get the player ship tied to the player socket\n    let playerShip = this.world.queryObject({\n      playerId: playerId,\n      instanceType: Ship,\n    });\n\n    if (playerShip) {\n      if (inputData.input == \"up\") {\n        playerShip.accelerate(0.05);\n        playerShip.showThrust = 5; // show thrust for next steps.\n      } else if (inputData.input == \"right\") {\n        playerShip.turnRight(2.5);\n      } else if (inputData.input == \"left\") {\n        playerShip.turnLeft(2.5);\n      } else if (inputData.input == \"space\") {\n        this.makeMissile(playerShip, inputData.messageIndex);\n        this.emit(\"fireMissile\");\n      }\n    }\n  }\n\n  // Makes a new ship, places it randomly and adds it to the game world\n  makeShip(playerId) {\n    let newShipX = Math.floor(Math.random() * (this.worldSettings.width - 200)) + 200;\n    let newShipY = Math.floor(Math.random() * (this.worldSettings.height - 200)) + 200;\n\n    let ship = new Ship(this, null, {\n      position: new TwoVector(newShipX, newShipY),\n    });\n\n    ship.playerId = playerId;\n    this.addObjectToWorld(ship);\n    console.log(`ship added: ${ship.toString()}`);\n\n    return ship;\n  }\n\n  makeMissile(playerShip, inputId) {\n    let missile = new Missile(this);\n\n    // we want the missile location and velocity to correspond to that of the ship firing it\n    missile.position.copy(playerShip.position);\n    missile.velocity.copy(playerShip.velocity);\n    missile.angle = playerShip.angle;\n    missile.playerId = playerShip.playerId;\n    missile.ownerId = playerShip.id;\n    missile.inputId = inputId; // this enables usage of the missile shadow object\n    missile.velocity.x += Math.cos(missile.angle * (Math.PI / 180)) * 10;\n    missile.velocity.y += Math.sin(missile.angle * (Math.PI / 180)) * 10;\n\n    this.trace.trace(() => `missile[${missile.id}] created vel=${missile.velocity}`);\n\n    let obj = this.addObjectToWorld(missile);\n\n    // if the object was added successfully to the game world, destroy the missile after some game ticks\n    if (obj) this.timer.add(30, this.destroyMissile, this, [obj.id]);\n\n    return missile;\n  }\n\n  // destroy the missile if it still exists\n  destroyMissile(missileId) {\n    if (this.world.objects[missileId]) {\n      this.trace.trace(() => `missile[${missileId}] destroyed`);\n      this.removeObjectFromWorld(missileId);\n    }\n  }\n\n  // at the end of the step, reduce the thrust for all objects\n  reduceVisibleThrust(postStepEv) {\n    if (postStepEv.isReenact) return;\n\n    let ships = this.world.queryObjects({\n      instanceType: Ship,\n    });\n\n    ships.forEach((ship) => {\n      if (Number.isInteger(ship.showThrust) && ship.showThrust >= 1) ship.showThrust--;\n    });\n  }\n}\n"],"file":"SpaaaceGameEngine.js"}