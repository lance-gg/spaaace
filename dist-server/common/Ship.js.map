{"version":3,"sources":["../../src/common/Ship.js"],"names":["Ship","gameEngine","options","props","showThrust","Renderer","renderer","getInstance","shipActor","ShipActor","sprite","sprites","id","position","set","x","y","layer2","addChild","isOwnedByPlayer","addPlayerShip","addOffscreenIndicator","fireLoop","destroy","onPreStep","removeListener","playerShip","removeOffscreenIndicator","actor","then","isBot","other","steer","on","fireLoopTime","Math","round","random","timer","loop","target","distanceToTargetSquared","makeMissile","p1","p2","wrapDist","d","abs","dx","shortestVector","worldSettings","width","dy","height","closestTarget","closestDistance2","Infinity","Object","keys","world","objects","objId","obj","distance2","newVX","newVY","angleToTarget","atan2","PI","turnRight","angle","turnLeft","accelerate","angleLocal","percent","max","assign","type","BaseTypes","TYPES","INT32","DynamicObject"],"mappings":"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","sourcesContent":["import { BaseTypes, DynamicObject, Renderer } from 'lance-gg';\nimport ShipActor from '../client/ShipActor';\n\nexport default class Ship extends DynamicObject {\n\n    constructor(gameEngine, options, props) {\n        super(gameEngine, options, props);\n        this.showThrust = 0;\n    }\n\n    get maxSpeed() { return 3.0; }\n\n    onAddToWorld(gameEngine) {\n        if (Renderer) {\n            let renderer = Renderer.getInstance();\n            let shipActor = new ShipActor(renderer);\n            let sprite = shipActor.sprite;\n            renderer.sprites[this.id] = sprite;\n            sprite.id = this.id;\n            sprite.position.set(this.position.x, this.position.y);\n            renderer.layer2.addChild(sprite);\n\n            if (gameEngine.isOwnedByPlayer(this)) {\n                renderer.addPlayerShip(sprite);\n            } else {\n                renderer.addOffscreenIndicator(this);\n            }\n        }\n    }\n\n    onRemoveFromWorld(gameEngine) {\n\n        if (this.fireLoop) {\n            this.fireLoop.destroy();\n        }\n\n        if (this.onPreStep){\n            this.gameEngine.removeListener('preStep', this.onPreStep);\n            this.onPreStep = null;\n        }\n\n        if (Renderer) {\n            let renderer = Renderer.getInstance();\n            if (gameEngine.isOwnedByPlayer(this)) {\n                renderer.playerShip = null;\n            } else {\n                renderer.removeOffscreenIndicator(this);\n            }\n            let sprite = renderer.sprites[this.id];\n            if (sprite) {\n                if (sprite.actor) {\n                    // removal \"takes time\"\n                    sprite.actor.destroy().then(()=>{\n                        delete renderer.sprites[this.id];\n                    });\n                } else {\n                    sprite.destroy();\n                    delete renderer.sprites[this.id];\n                }\n            }\n        }\n    }\n\n    // no bending corrections on angle needed, angle is deterministic\n    // position correction if less than world width/height\n    get bending() {\n        return { angleLocal: { percent: 0.0 }, position: { max: 500.0 } };\n    }\n\n    static get netScheme() {\n        return Object.assign({\n            showThrust: { type: BaseTypes.TYPES.INT32 }\n        }, super.netScheme);\n    }\n\n    toString() {\n        return `${this.isBot?'Bot':'Player'}::Ship::${super.toString()}`;\n    }\n\n    syncTo(other) {\n        super.syncTo(other);\n        this.showThrust = other.showThrust;\n    }\n\n\n    destroy() {\n    }\n\n    attachAI() {\n        this.isBot = true;\n\n        this.onPreStep = () => {\n            this.steer();\n        };\n\n        this.gameEngine.on('preStep', this.onPreStep);\n\n        let fireLoopTime = Math.round(250 + Math.random() * 100);\n        this.fireLoop = this.gameEngine.timer.loop(fireLoopTime, () => {\n            if (this.target && this.distanceToTargetSquared(this.target) < 160000) {\n                this.gameEngine.makeMissile(this);\n            }\n        });\n    }\n\n    shortestVector(p1, p2, wrapDist) {\n        let d = Math.abs(p2 - p1);\n        if (d > Math.abs(p2 + wrapDist - p1)) p2 += wrapDist;\n        else if (d > Math.abs(p1 + wrapDist - p2)) p1 += wrapDist;\n        return p2 - p1;\n    }\n\n    distanceToTargetSquared(target) {\n        let dx = this.shortestVector(this.position.x, target.position.x, this.gameEngine.worldSettings.width);\n        let dy = this.shortestVector(this.position.y, target.position.y, this.gameEngine.worldSettings.height);\n        return dx * dx + dy * dy;\n    }\n\n    steer() {\n        let closestTarget = null;\n        let closestDistance2 = Infinity;\n        for (let objId of Object.keys(this.gameEngine.world.objects)) {\n            let obj = this.gameEngine.world.objects[objId];\n            if (obj != this) {\n                let distance2 = this.distanceToTargetSquared(obj);\n                if (distance2 < closestDistance2) {\n                    closestTarget = obj;\n                    closestDistance2 = distance2;\n                }\n            }\n        }\n\n        this.target = closestTarget;\n\n        if (this.target) {\n\n            let newVX = this.shortestVector(this.position.x, this.target.position.x, this.gameEngine.worldSettings.width);\n            let newVY = this.shortestVector(this.position.y, this.target.position.y, this.gameEngine.worldSettings.height);\n            let angleToTarget = Math.atan2(newVX, newVY)/Math.PI* 180;\n            angleToTarget *= -1;\n            angleToTarget += 90; // game uses zero angle on the right, clockwise\n            if (angleToTarget < 0) angleToTarget += 360;\n            let turnRight = this.shortestVector(this.angle, angleToTarget, 360);\n\n            if (turnRight > 4) {\n                this.turnRight(2.5);\n            } else if (turnRight < -4) {\n                this.turnLeft(2.5);\n            } else {\n                this.accelerate(0.05);\n                this.showThrust = 5;\n            }\n\n        }\n    }\n}\n"],"file":"Ship.js"}