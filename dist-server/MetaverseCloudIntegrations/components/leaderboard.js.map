{"version":3,"sources":["../../../src/MetaverseCloudIntegrations/components/leaderboard.js"],"names":["updateLeaderboard","req","res","leaderboardObject","body","leaderboardArray","rows","split","i","length","completed","parseInt","accuracy","parseFloat","toFixed","createLeaderboard","send","accuracyLeaderboard","Object","keys","sort","a","b","map","element","department","completedLeaderboard","process","env","LEADERBOARD_API_KEY","get","LEADERBOARD_URL_SLUG","then","response","data","existingLeaderboards","AccuracyLeaderboard","CompletedLeaderboard","forEach","uniqueName","includes","tempArray","board","category","toLowerCase","order","boardString","prepareAssetText","boardObj","newItem","index","prepByCategory","cat","asset","id","text","newText","toString","updateAssetText","style","toUpdate","put"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { publicAPI } from \"./index.js.js.js\";\n\nexport const updateLeaderboard = (req, res) => {\n  let leaderboardObject = {};\n  if (!req.body) return;\n  let leaderboardArray = req.body.rows.split(\",\");\n\n  // Create the object from raw data\n  for (let i = 0; i < leaderboardArray.length; i++) {\n    switch (i % 5) {\n      case 0:\n        leaderboardObject[leaderboardArray[i]] = {};\n        break;\n      case 1:\n        leaderboardObject[leaderboardArray[i - 1]].completed = parseInt(leaderboardArray[i]);\n        break;\n      case 4:\n        leaderboardObject[leaderboardArray[i - 4]].accuracy = parseFloat(leaderboardArray[i]).toFixed(0);\n        break;\n      default:\n        break;\n    }\n  }\n\n  createLeaderboard(leaderboardObject);\n  res.send(\"Successfully updated!\");\n};\n\nconst createLeaderboard = (leaderboardObject) => {\n  let accuracyLeaderboard = Object.keys(leaderboardObject)\n    .sort((a, b) => {\n      if (leaderboardObject[b].accuracy === leaderboardObject[a].accuracy) {\n        return leaderboardObject[b].completed - leaderboardObject[a].completed;\n      }\n      return leaderboardObject[b].accuracy - leaderboardObject[a].accuracy;\n    })\n    .map((element) => {\n      return { ...leaderboardObject[element], department: element };\n    });\n\n  let completedLeaderboard = Object.keys(leaderboardObject)\n    .sort((a, b) => {\n      if (leaderboardObject[b].completed === leaderboardObject[a].completed) {\n        return leaderboardObject[b].accuracy - leaderboardObject[a].accuracy;\n      }\n      return leaderboardObject[b].completed - leaderboardObject[a].completed;\n    })\n    .map((element) => {\n      return { ...leaderboardObject[element], department: element };\n    });\n\n  publicAPI(process.env.LEADERBOARD_API_KEY)\n    .get(`/world/${process.env.LEADERBOARD_URL_SLUG}/assets`, {})\n    .then((response) => {\n      const { data } = response;\n      let existingLeaderboards = {\n        AccuracyLeaderboard: {\n          department: {},\n          completed: {},\n          accuracy: {},\n        },\n        CompletedLeaderboard: {\n          department: {},\n          completed: {},\n          accuracy: {},\n        },\n      };\n\n      data.forEach((element) => {\n        const { uniqueName } = element;\n        if (uniqueName && (uniqueName.includes(\"AccuracyLeaderboard\") || uniqueName.includes(\"CompletedLeaderboard\"))) {\n          const tempArray = uniqueName.split(\"_\");\n          const board = tempArray[0];\n          const category = tempArray[1].toLowerCase();\n          const order = tempArray[2];\n          existingLeaderboards[board][category][order] = element;\n        }\n      });\n\n      for (let i = 0; i < completedLeaderboard.length; i++) {\n        const boardString = \"CompletedLeaderboard\";\n        prepareAssetText(boardString, existingLeaderboards[boardString], completedLeaderboard[i], i);\n      }\n\n      for (let i = 0; i < accuracyLeaderboard.length; i++) {\n        const boardString = \"AccuracyLeaderboard\";\n        prepareAssetText(boardString, existingLeaderboards[boardString], accuracyLeaderboard[i], i);\n      }\n    });\n};\n\nconst prepareAssetText = (\n  boardString,\n  boardObj,\n  newItem,\n  index,\n  // addedNewAssetCallback\n) => {\n  // This isn't yet working properly\n  // const prepCreateAsset = async (cat) => {\n  //   const firstAsset = boardObj[cat][0];\n  //   if (!firstAsset) return;\n  //   let newAsset = firstAsset;\n  //   delete newAsset.id;\n  //   newAsset.position.y =\n  //     firstAsset.position.y + firstAsset.textStyle.textSize + index;\n  //   newAsset.uniqueName = `${boardString}_${cat}_${index}`;\n  //   newAsset.text = newItem[cat].toString();\n  //   // console.log(newItem[cat]);\n  //   // addedNewAssetCallback(boardString, cat, index, newAsset);\n  //   const id = await createAsset(newAsset);\n  //   console.log(newAsset.text);\n  //   updateAssetText(id, newAsset.text, firstAsset.textStyle);\n  // };\n\n  const prepByCategory = (cat) => {\n    const asset = boardObj[cat][index];\n    if (!asset) {\n      // console.log(\"No asset for index\", index);\n      // prepCreateAsset(cat);\n      return;\n    }\n    const { id, text } = asset;\n    const newText = newItem[cat].toString();\n    if (text !== newText) updateAssetText(id, newText);\n  };\n\n  prepByCategory(\"department\");\n  prepByCategory(\"completed\");\n  prepByCategory(\"accuracy\");\n};\n\nconst updateAssetText = (id, text, style) => {\n  const toUpdate = { text };\n  if (style) toUpdate.style = style;\n  publicAPI(process.env.LEADERBOARD_API_KEY).put(\n    `/world/${process.env.LEADERBOARD_URL_SLUG}/assets/${id}/set-custom-text`,\n    toUpdate,\n  );\n};\n\n// Not yet working properly\n// const createAsset = (assetObj) => {\n//   return new Promise((resolve, reject) => {\n//     const { assetId, position, uniqueName } = assetObj;\n//     publicAPI(process.env.LEADERBOARD_API_KEY)\n//       .post(`/world/${process.env.LEADERBOARD_URL_SLUG}/assets`, {\n//         assetId,\n//         position,\n//         uniqueName,\n//       })\n//       .then((response) => {\n//         return resolve(response.data.id);\n//       });\n//   });\n// };\n"],"file":"leaderboard.js"}